
STM32F7_power_meter_3phase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e20  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d8  08005018  08005018  00015018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f0  080068f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f8  080068f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000078  08006974  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006974  00020314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105f2  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246f  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00032b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000339d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002873c  00000000  00000000  00034790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcbd  00000000  00000000  0005cecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff47c  00000000  00000000  0006cb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c005  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004058  00000000  00000000  0016c058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08005000 	.word	0x08005000

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08005000 	.word	0x08005000

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <vADCStartSampling>:
//adc3phase_t Vi2;
//adc3phase_t Vi3;
//adc3phase_t Vdc;
//adc3phase_t Vidc;

void vADCStartSampling(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

	int i = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
	S.sum = 0;
 800053a:	4911      	ldr	r1, [pc, #68]	; (8000580 <vADCStartSampling+0x50>)
 800053c:	f04f 0200 	mov.w	r2, #0
 8000540:	f04f 0300 	mov.w	r3, #0
 8000544:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < NUM_OF_CHANNEL; i++)
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	e00c      	b.n	8000568 <vADCStartSampling+0x38>
	{
		Vgeneral[i].sum = 0;
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <vADCStartSampling+0x54>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	18d1      	adds	r1, r2, r3
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < NUM_OF_CHANNEL; i++)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b07      	cmp	r3, #7
 800056c:	ddef      	ble.n	800054e <vADCStartSampling+0x1e>
	}

	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)SampleValue, NUM_OF_CONVERT);
 800056e:	220f      	movs	r2, #15
 8000570:	4905      	ldr	r1, [pc, #20]	; (8000588 <vADCStartSampling+0x58>)
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <vADCStartSampling+0x5c>)
 8000574:	f000 feea 	bl	800134c <HAL_ADC_Start_DMA>

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000158 	.word	0x20000158
 8000584:	20000098 	.word	0x20000098
 8000588:	20000118 	.word	0x20000118
 800058c:	20000248 	.word	0x20000248

08000590 <HAL_ADC_ConvCpltCallback>:
	HAL_ADC_Stop_DMA(&hadc3);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	int i;

		if(hadc->Instance == ADC3 )// sample after each 33.33 us ( 30 khz)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a64      	ldr	r2, [pc, #400]	; (8000730 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	f040 80a8 	bne.w	80006f4 <HAL_ADC_ConvCpltCallback+0x164>
		{

			HAL_GPIO_TogglePin(GPIOB, PB10_Pin);
 80005a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a8:	4862      	ldr	r0, [pc, #392]	; (8000734 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80005aa:	f002 f8e6 	bl	800277a <HAL_GPIO_TogglePin>

			countsample++;
 80005ae:	4b62      	ldr	r3, [pc, #392]	; (8000738 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	4a60      	ldr	r2, [pc, #384]	; (8000738 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80005b6:	6013      	str	r3, [r2, #0]

			for(i = 0; i < NUM_OF_CHANNEL; i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	e02a      	b.n	8000614 <HAL_ADC_ConvCpltCallback+0x84>
			{
				Vgeneral[i].sum += pow( (double)SampleValue[SAMPLE_VAB_OFFSET] * 3.3 / 4095.0 - 1.65, 2.0);
 80005be:	4b5f      	ldr	r3, [pc, #380]	; (800073c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	ee07 3a90 	vmov	s15, r3
 80005c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80005ca:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000700 <HAL_ADC_ConvCpltCallback+0x170>
 80005ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005d2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8000708 <HAL_ADC_ConvCpltCallback+0x178>
 80005d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005da:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000710 <HAL_ADC_ConvCpltCallback+0x180>
 80005de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80005e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80005e6:	eeb0 0b47 	vmov.f64	d0, d7
 80005ea:	f004 f9a5 	bl	8004938 <pow>
 80005ee:	eeb0 6b40 	vmov.f64	d6, d0
 80005f2:	4a53      	ldr	r2, [pc, #332]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	4413      	add	r3, r2
 80005fa:	ed93 7b00 	vldr	d7, [r3]
 80005fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000602:	4a4f      	ldr	r2, [pc, #316]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	ed83 7b00 	vstr	d7, [r3]
			for(i = 0; i < NUM_OF_CHANNEL; i++)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b07      	cmp	r3, #7
 8000618:	ddd1      	ble.n	80005be <HAL_ADC_ConvCpltCallback+0x2e>
			}

			//calculate immediate Apparent Power s:


			if(countsample == NUMBER_OF_SAMPLE)
 800061a:	4b47      	ldr	r3, [pc, #284]	; (8000738 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000622:	d167      	bne.n	80006f4 <HAL_ADC_ConvCpltCallback+0x164>
			{
				HAL_GPIO_TogglePin(GPIOB, PB11_Pin);		//check 10ms
 8000624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000628:	4842      	ldr	r0, [pc, #264]	; (8000734 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800062a:	f002 f8a6 	bl	800277a <HAL_GPIO_TogglePin>

				//calculate VAC result
				for(i = 0; i <= SAMPLE_VAC_OFFSET; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e02b      	b.n	800068c <HAL_ADC_ConvCpltCallback+0xfc>
				{
					Vgeneral[i].result = sqrt(Vgeneral[i].sum/(double)NUMBER_OF_SAMPLE) * 37555.0 / 363.0;
 8000634:	4a42      	ldr	r2, [pc, #264]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4413      	add	r3, r2
 800063c:	ed93 7b00 	vldr	d7, [r3]
 8000640:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8000718 <HAL_ADC_ConvCpltCallback+0x188>
 8000644:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000648:	eeb0 0b46 	vmov.f64	d0, d6
 800064c:	f004 fc38 	bl	8004ec0 <sqrt>
 8000650:	eeb0 7b40 	vmov.f64	d7, d0
 8000654:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000720 <HAL_ADC_ConvCpltCallback+0x190>
 8000658:	ee27 6b06 	vmul.f64	d6, d7, d6
 800065c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000728 <HAL_ADC_ConvCpltCallback+0x198>
 8000660:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000664:	4a36      	ldr	r2, [pc, #216]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	4413      	add	r3, r2
 800066c:	3308      	adds	r3, #8
 800066e:	ed83 7b00 	vstr	d7, [r3]
					Vgeneral[i].sum = 0;
 8000672:	4a33      	ldr	r2, [pc, #204]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	18d1      	adds	r1, r2, r3
 800067a:	f04f 0200 	mov.w	r2, #0
 800067e:	f04f 0300 	mov.w	r3, #0
 8000682:	e9c1 2300 	strd	r2, r3, [r1]
				for(i = 0; i <= SAMPLE_VAC_OFFSET; i++)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b02      	cmp	r3, #2
 8000690:	ddd0      	ble.n	8000634 <HAL_ADC_ConvCpltCallback+0xa4>
				}

				//calculate I AC result
				for(i = SAMPLE_VI1_OFFSET; i <= SAMPLE_VI3_OFFSET; i++)
 8000692:	2303      	movs	r3, #3
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e027      	b.n	80006e8 <HAL_ADC_ConvCpltCallback+0x158>
				{
					Vgeneral[i].result= sqrt(Vgeneral[i].sum/(double)NUMBER_OF_SAMPLE) / 1.65;
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	4413      	add	r3, r2
 80006a0:	ed93 7b00 	vldr	d7, [r3]
 80006a4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000718 <HAL_ADC_ConvCpltCallback+0x188>
 80006a8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006ac:	eeb0 0b46 	vmov.f64	d0, d6
 80006b0:	f004 fc06 	bl	8004ec0 <sqrt>
 80006b4:	eeb0 6b40 	vmov.f64	d6, d0
 80006b8:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000710 <HAL_ADC_ConvCpltCallback+0x180>
 80006bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006c0:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	ed83 7b00 	vstr	d7, [r3]
					Vgeneral[i].sum = 0;
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	18d1      	adds	r1, r2, r3
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	e9c1 2300 	strd	r2, r3, [r1]
				for(i = SAMPLE_VI1_OFFSET; i <= SAMPLE_VI3_OFFSET; i++)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	ddd4      	ble.n	8000698 <HAL_ADC_ConvCpltCallback+0x108>
				//calculate Vdc and Vidc
				//todo

				//calculate rms Apparent Power S:

				countsample = 0;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
			}
		}



}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	f3af 8000 	nop.w
 8000700:	66666666 	.word	0x66666666
 8000704:	400a6666 	.word	0x400a6666
 8000708:	00000000 	.word	0x00000000
 800070c:	40affe00 	.word	0x40affe00
 8000710:	66666666 	.word	0x66666666
 8000714:	3ffa6666 	.word	0x3ffa6666
 8000718:	00000000 	.word	0x00000000
 800071c:	4072c000 	.word	0x4072c000
 8000720:	00000000 	.word	0x00000000
 8000724:	40e25660 	.word	0x40e25660
 8000728:	00000000 	.word	0x00000000
 800072c:	4076b000 	.word	0x4076b000
 8000730:	40012200 	.word	0x40012200
 8000734:	40020400 	.word	0x40020400
 8000738:	20000094 	.word	0x20000094
 800073c:	20000118 	.word	0x20000118
 8000740:	20000098 	.word	0x20000098

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fd5f 	bl	800120a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f810 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 fa84 	bl	8000c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000754:	f000 fa64 	bl	8000c20 <MX_DMA_Init>
  MX_ADC3_Init();
 8000758:	f000 f89c 	bl	8000894 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 800075c:	f000 fa30 	bl	8000bc0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000760:	f000 f9ae 	bl	8000ac0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000764:	f000 f9e2 	bl	8000b2c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  vADCStartSampling();
 8000768:	f7ff fee2 	bl	8000530 <vADCStartSampling>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x28>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0b8      	sub	sp, #224	; 0xe0
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 f89a 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2290      	movs	r2, #144	; 0x90
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 f88b 	bl	80048b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a2:	f002 f805 	bl	80027b0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b39      	ldr	r3, [pc, #228]	; (800088c <SystemClock_Config+0x11c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <SystemClock_Config+0x11c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <SystemClock_Config+0x11c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <SystemClock_Config+0x120>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a33      	ldr	r2, [pc, #204]	; (8000890 <SystemClock_Config+0x120>)
 80007c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <SystemClock_Config+0x120>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007f8:	23d8      	movs	r3, #216	; 0xd8
 80007fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000804:	2309      	movs	r3, #9
 8000806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f82e 	bl	8002870 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800081a:	f000 fb2f 	bl	8000e7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800081e:	f001 ffd7 	bl	80027d0 <HAL_PWREx_EnableOverDrive>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000828:	f000 fb28 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800083e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800084e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000852:	2107      	movs	r1, #7
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fab9 	bl	8002dcc <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000860:	f000 fb0c 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800086a:	2300      	movs	r3, #0
 800086c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fcac 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x112>
  {
    Error_Handler();
 800087e:	f000 fafd 	bl	8000e7c <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	37e0      	adds	r7, #224	; 0xe0
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008a6:	4b83      	ldr	r3, [pc, #524]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008a8:	4a83      	ldr	r2, [pc, #524]	; (8000ab8 <MX_ADC3_Init+0x224>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80008ac:	4b81      	ldr	r3, [pc, #516]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b7f      	ldr	r3, [pc, #508]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ba:	4b7e      	ldr	r3, [pc, #504]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008bc:	2201      	movs	r2, #1
 80008be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80008c0:	4b7c      	ldr	r3, [pc, #496]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b7b      	ldr	r3, [pc, #492]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b77      	ldr	r3, [pc, #476]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008d6:	4a79      	ldr	r2, [pc, #484]	; (8000abc <MX_ADC3_Init+0x228>)
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 15;
 80008e0:	4b74      	ldr	r3, [pc, #464]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008e2:	220f      	movs	r2, #15
 80008e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80008e6:	4b73      	ldr	r3, [pc, #460]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b71      	ldr	r3, [pc, #452]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008f4:	486f      	ldr	r0, [pc, #444]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80008f6:	f000 fce5 	bl	80012c4 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 fabc 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000904:	2304      	movs	r3, #4
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800090c:	2302      	movs	r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4867      	ldr	r0, [pc, #412]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000916:	f000 fe1b 	bl	8001550 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 faac 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000924:	2305      	movs	r3, #5
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000928:	2302      	movs	r3, #2
 800092a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4860      	ldr	r0, [pc, #384]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000932:	f000 fe0d 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800093c:	f000 fa9e 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000940:	2306      	movs	r3, #6
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000944:	2303      	movs	r3, #3
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4859      	ldr	r0, [pc, #356]	; (8000ab4 <MX_ADC3_Init+0x220>)
 800094e:	f000 fdff 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000958:	f000 fa90 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800095c:	2307      	movs	r3, #7
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000960:	2304      	movs	r3, #4
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4852      	ldr	r0, [pc, #328]	; (8000ab4 <MX_ADC3_Init+0x220>)
 800096a:	f000 fdf1 	bl	8001550 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000974:	f000 fa82 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000978:	2308      	movs	r3, #8
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800097c:	2305      	movs	r3, #5
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	484b      	ldr	r0, [pc, #300]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000986:	f000 fde3 	bl	8001550 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000990:	f000 fa74 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000994:	2309      	movs	r3, #9
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000998:	2306      	movs	r3, #6
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4844      	ldr	r0, [pc, #272]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80009a2:	f000 fdd5 	bl	8001550 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80009ac:	f000 fa66 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009b0:	230a      	movs	r3, #10
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	483d      	ldr	r0, [pc, #244]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80009be:	f000 fdc7 	bl	8001550 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 80009c8:	f000 fa58 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009cc:	230c      	movs	r3, #12
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80009da:	f000 fdb9 	bl	8001550 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 80009e4:	f000 fa4a 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009e8:	230a      	movs	r3, #10
 80009ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80009ec:	2309      	movs	r3, #9
 80009ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <MX_ADC3_Init+0x220>)
 80009f6:	f000 fdab 	bl	8001550 <HAL_ADC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC3_Init+0x170>
  {
    Error_Handler();
 8000a00:	f000 fa3c 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a04:	230c      	movs	r3, #12
 8000a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000a12:	f000 fd9d 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC3_Init+0x18c>
  {
    Error_Handler();
 8000a1c:	f000 fa2e 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a20:	230a      	movs	r3, #10
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000a24:	230b      	movs	r3, #11
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000a2e:	f000 fd8f 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC3_Init+0x1a8>
  {
    Error_Handler();
 8000a38:	f000 fa20 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000a40:	230c      	movs	r3, #12
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000a4a:	f000 fd81 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC3_Init+0x1c4>
  {
    Error_Handler();
 8000a54:	f000 fa12 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a58:	230a      	movs	r3, #10
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000a5c:	230d      	movs	r3, #13
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000a66:	f000 fd73 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC3_Init+0x1e0>
  {
    Error_Handler();
 8000a70:	f000 fa04 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a74:	230c      	movs	r3, #12
 8000a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000a78:	230e      	movs	r3, #14
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000a82:	f000 fd65 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC3_Init+0x1fc>
  {
    Error_Handler();
 8000a8c:	f000 f9f6 	bl	8000e7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a90:	230a      	movs	r3, #10
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000a94:	230f      	movs	r3, #15
 8000a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_ADC3_Init+0x220>)
 8000a9e:	f000 fd57 	bl	8001550 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC3_Init+0x218>
  {
    Error_Handler();
 8000aa8:	f000 f9e8 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000248 	.word	0x20000248
 8000ab8:	40012200 	.word	0x40012200
 8000abc:	0f000001 	.word	0x0f000001

08000ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
	//  htim6.Init.Period = 2 - 1;
	//	each interrupt = 2 us => count 50 times to sample ADC

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <MX_TIM6_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000af2:	f002 ff93 	bl	8003a1c <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000afc:	f000 f9be 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b00:	2320      	movs	r3, #32
 8000b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_TIM6_Init+0x64>)
 8000b0e:	f003 f9a1 	bl	8003e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 f9b0 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000290 	.word	0x20000290
 8000b28:	40001000 	.word	0x40001000

08000b2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
//  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
//  htim7.Init.Period = 2 - 1;
//	each interrupt = 2 us => count 50 times to sample ADC
	
	
  htim7.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8000b3c:	f002 fb20 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8000b40:	4603      	mov	r3, r0
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <MX_TIM7_Init+0x88>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	0c9b      	lsrs	r3, r3, #18
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b50:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = SAMPLING_TIME - 1;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b5a:	2263      	movs	r2, #99	; 0x63
 8000b5c:	60da      	str	r2, [r3, #12]
	
	
  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b60:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <MX_TIM7_Init+0x90>)
 8000b62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b80:	f002 ff4c 	bl	8003a1c <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000b8a:	f000 f977 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM7_Init+0x8c>)
 8000b9c:	f003 f95a 	bl	8003e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM7_Init+0x7e>
  {
    Error_Handler();
 8000ba6:	f000 f969 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	200002d0 	.word	0x200002d0
 8000bbc:	40001400 	.word	0x40001400

08000bc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <MX_USART3_UART_Init+0x5c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USART3_UART_Init+0x58>)
 8000c04:	f003 f9d2 	bl	8003fac <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c0e:	f000 f935 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000168 	.word	0x20000168
 8000c1c:	40004800 	.word	0x40004800

08000c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_DMA_Init+0x38>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <MX_DMA_Init+0x38>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_DMA_Init+0x38>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2038      	movs	r0, #56	; 0x38
 8000c44:	f001 f825 	bl	8001c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c48:	2038      	movs	r0, #56	; 0x38
 8000c4a:	f001 f83e 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	4b7c      	ldr	r3, [pc, #496]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a7b      	ldr	r2, [pc, #492]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b79      	ldr	r3, [pc, #484]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8a:	4b76      	ldr	r3, [pc, #472]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a75      	ldr	r2, [pc, #468]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b73      	ldr	r3, [pc, #460]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b6a      	ldr	r3, [pc, #424]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a69      	ldr	r2, [pc, #420]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b64      	ldr	r3, [pc, #400]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a63      	ldr	r2, [pc, #396]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b5e      	ldr	r3, [pc, #376]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a5d      	ldr	r2, [pc, #372]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d02:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a57      	ldr	r2, [pc, #348]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <MX_GPIO_Init+0x208>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|PB10_Pin|PB11_Pin|LD3_Pin
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f644 4181 	movw	r1, #19585	; 0x4c81
 8000d20:	4851      	ldr	r0, [pc, #324]	; (8000e68 <MX_GPIO_Init+0x20c>)
 8000d22:	f001 fd11 	bl	8002748 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2140      	movs	r1, #64	; 0x40
 8000d2a:	4850      	ldr	r0, [pc, #320]	; (8000e6c <MX_GPIO_Init+0x210>)
 8000d2c:	f001 fd0c 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <MX_GPIO_Init+0x214>)
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x218>)
 8000d46:	f001 fb53 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d4a:	2332      	movs	r3, #50	; 0x32
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4843      	ldr	r0, [pc, #268]	; (8000e74 <MX_GPIO_Init+0x218>)
 8000d66:	f001 fb43 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6a:	2386      	movs	r3, #134	; 0x86
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	483c      	ldr	r0, [pc, #240]	; (8000e78 <MX_GPIO_Init+0x21c>)
 8000d86:	f001 fb33 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10_Pin PB11_Pin LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|PB10_Pin|PB11_Pin|LD3_Pin
 8000d8a:	f644 4381 	movw	r3, #19585	; 0x4c81
 8000d8e:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4831      	ldr	r0, [pc, #196]	; (8000e68 <MX_GPIO_Init+0x20c>)
 8000da4:	f001 fb24 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dba:	230b      	movs	r3, #11
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_GPIO_Init+0x20c>)
 8000dc6:	f001 fb13 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4822      	ldr	r0, [pc, #136]	; (8000e6c <MX_GPIO_Init+0x210>)
 8000de2:	f001 fb05 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	481c      	ldr	r0, [pc, #112]	; (8000e6c <MX_GPIO_Init+0x210>)
 8000dfa:	f001 faf9 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e10:	230a      	movs	r3, #10
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4817      	ldr	r0, [pc, #92]	; (8000e78 <MX_GPIO_Init+0x21c>)
 8000e1c:	f001 fae8 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	4810      	ldr	r0, [pc, #64]	; (8000e78 <MX_GPIO_Init+0x21c>)
 8000e36:	f001 fadb 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_GPIO_Init+0x210>)
 8000e58:	f001 faca 	bl	80023f0 <HAL_GPIO_Init>

}
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	10110000 	.word	0x10110000
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020000 	.word	0x40020000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x44>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_MspInit+0x44>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x44>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x44>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <HAL_ADC_MspInit+0x108>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d16d      	bne.n	8000fce <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a33      	ldr	r2, [pc, #204]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_ADC_MspInit+0x10c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    PF9     ------> ADC3_IN7
    PF10     ------> ADC3_IN8
    PC0     ------> ADC3_IN10
    PC2     ------> ADC3_IN12
    */
    GPIO_InitStruct.Pin = Vi3_Pin|Vab_Pin|Vbc_Pin|Vca_Pin
 8000f3a:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 8000f3e:	617b      	str	r3, [r7, #20]
                          |Vi1_Pin|Vi2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <HAL_ADC_MspInit+0x110>)
 8000f50:	f001 fa4e 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Vdc_Pin|Vidc_Pin;
 8000f54:	2305      	movs	r3, #5
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <HAL_ADC_MspInit+0x114>)
 8000f68:	f001 fa42 	bl	80023f0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <HAL_ADC_MspInit+0x11c>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000f98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000fb2:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000fb4:	f000 fea4 	bl	8001d00 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8000fbe:	f7ff ff5d 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_ADC_MspInit+0x118>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40012200 	.word	0x40012200
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	200001e8 	.word	0x200001e8
 8000fec:	40026410 	.word	0x40026410

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_TIM_Base_MspInit+0x78>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d114      	bne.n	800102c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2036      	movs	r0, #54	; 0x36
 8001020:	f000 fe37 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001024:	2036      	movs	r0, #54	; 0x36
 8001026:	f000 fe50 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800102a:	e018      	b.n	800105e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_TIM_Base_MspInit+0x80>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d113      	bne.n	800105e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x7c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2037      	movs	r0, #55	; 0x37
 8001054:	f000 fe1d 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001058:	2037      	movs	r0, #55	; 0x37
 800105a:	f000 fe36 	bl	8001cca <HAL_NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40001000 	.word	0x40001000
 800106c:	40023800 	.word	0x40023800
 8001070:	40001400 	.word	0x40001400

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_UART_MspInit+0x7c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d128      	bne.n	80010e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_UART_MspInit+0x80>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <HAL_UART_MspInit+0x80>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_UART_MspInit+0x80>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_UART_MspInit+0x80>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_UART_MspInit+0x80>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_UART_MspInit+0x80>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d8:	2307      	movs	r3, #7
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_UART_MspInit+0x84>)
 80010e4:	f001 f984 	bl	80023f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 f89c 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <TIM6_DAC_IRQHandler+0x10>)
 8001156:	f002 fc8c 	bl	8003a72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000290 	.word	0x20000290

08001164 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <TIM7_IRQHandler+0x10>)
 800116a:	f002 fc82 	bl	8003a72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200002d0 	.word	0x200002d0

08001178 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <DMA2_Stream0_IRQHandler+0x10>)
 800117e:	f000 fecd 	bl	8001f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001e8 	.word	0x200001e8

0800118c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SystemInit+0x28>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <SystemInit+0x28>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SystemInit+0x28>)
 80011a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011be:	e003      	b.n	80011c8 <LoopCopyDataInit>

080011c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011c6:	3104      	adds	r1, #4

080011c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011d0:	d3f6      	bcc.n	80011c0 <CopyDataInit>
  ldr  r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011d4:	e002      	b.n	80011dc <LoopFillZerobss>

080011d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011d8:	f842 3b04 	str.w	r3, [r2], #4

080011dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011e0:	d3f9      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e2:	f7ff ffd3 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f003 fb43 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff faab 	bl	8000744 <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80011f4:	08006900 	.word	0x08006900
  ldr  r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001200:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001204:	20000314 	.word	0x20000314

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>

0800120a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120e:	2003      	movs	r0, #3
 8001210:	f000 fd34 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001214:	2000      	movs	r0, #0
 8001216:	f000 f805 	bl	8001224 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800121a:	f7ff fe35 	bl	8000e88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fd4f 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 fd17 	bl	8001c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	20000310 	.word	0x20000310

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000310 	.word	0x20000310

080012c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e031      	b.n	800133e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fdf4 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_ADC_Init+0x84>)
 8001308:	4013      	ands	r3, r2
 800130a:	f043 0202 	orr.w	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fa66 	bl	80017e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f023 0303 	bic.w	r3, r3, #3
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
 800132e:	e001      	b.n	8001334 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	ffffeefd 	.word	0xffffeefd

0800134c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_ADC_Start_DMA+0x1e>
 8001366:	2302      	movs	r3, #2
 8001368:	e0c7      	b.n	80014fa <HAL_ADC_Start_DMA+0x1ae>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b01      	cmp	r3, #1
 800137e:	d018      	beq.n	80013b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001390:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_ADC_Start_DMA+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a5c      	ldr	r2, [pc, #368]	; (8001508 <HAL_ADC_Start_DMA+0x1bc>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9a      	lsrs	r2, r3, #18
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	f040 809b 	bne.w	80014f8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c6:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_ADC_Start_DMA+0x1c0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013fc:	d106      	bne.n	800140c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f023 0206 	bic.w	r2, r3, #6
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
 800140a:	e002      	b.n	8001412 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141e:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <HAL_ADC_Start_DMA+0x1c4>)
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <HAL_ADC_Start_DMA+0x1c8>)
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <HAL_ADC_Start_DMA+0x1cc>)
 8001430:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800143a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800144a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	334c      	adds	r3, #76	; 0x4c
 8001466:	4619      	mov	r1, r3
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f000 fcf6 	bl	8001e5c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_ADC_Start_DMA+0x1d0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10f      	bne.n	800149c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d136      	bne.n	80014f8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	e02d      	b.n	80014f8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_ADC_Start_DMA+0x1d4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d10e      	bne.n	80014c4 <HAL_ADC_Start_DMA+0x178>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_ADC_Start_DMA+0x1d0>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d113      	bne.n	80014f8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a13      	ldr	r2, [pc, #76]	; (8001524 <HAL_ADC_Start_DMA+0x1d8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10e      	bne.n	80014f8 <HAL_ADC_Start_DMA+0x1ac>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014f6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	fffff8fe 	.word	0xfffff8fe
 8001510:	080019d9 	.word	0x080019d9
 8001514:	08001a93 	.word	0x08001a93
 8001518:	08001aaf 	.word	0x08001aaf
 800151c:	40012300 	.word	0x40012300
 8001520:	40012000 	.word	0x40012000
 8001524:	40012200 	.word	0x40012200

08001528 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x1c>
 8001568:	2302      	movs	r3, #2
 800156a:	e12a      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x272>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b09      	cmp	r3, #9
 800157a:	d93a      	bls.n	80015f2 <HAL_ADC_ConfigChannel+0xa2>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001584:	d035      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	3b1e      	subs	r3, #30
 800159c:	2207      	movs	r2, #7
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	400a      	ands	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a87      	ldr	r2, [pc, #540]	; (80017d0 <HAL_ADC_ConfigChannel+0x280>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10a      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68d9      	ldr	r1, [r3, #12]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	061a      	lsls	r2, r3, #24
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ca:	e035      	b.n	8001638 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68d9      	ldr	r1, [r3, #12]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4403      	add	r3, r0
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	409a      	lsls	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f0:	e022      	b.n	8001638 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6919      	ldr	r1, [r3, #16]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6919      	ldr	r1, [r3, #16]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4403      	add	r3, r0
 800162e:	409a      	lsls	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d824      	bhi.n	800168a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b05      	subs	r3, #5
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43da      	mvns	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	400a      	ands	r2, r1
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
 8001688:	e04c      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d824      	bhi.n	80016dc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b23      	subs	r3, #35	; 0x23
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b23      	subs	r3, #35	; 0x23
 80016ce:	fa00 f203 	lsl.w	r2, r0, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30
 80016da:	e023      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b41      	subs	r3, #65	; 0x41
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b41      	subs	r3, #65	; 0x41
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_ADC_ConfigChannel+0x284>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10a      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1f4>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001736:	d105      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_ADC_ConfigChannel+0x288>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_ADC_ConfigChannel+0x288>)
 800173e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001742:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_ADC_ConfigChannel+0x284>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d109      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x212>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b12      	cmp	r3, #18
 8001754:	d105      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_ADC_ConfigChannel+0x288>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_ADC_ConfigChannel+0x288>)
 800175c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001760:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_ADC_ConfigChannel+0x284>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d125      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x268>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_ADC_ConfigChannel+0x280>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x22e>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b11      	cmp	r3, #17
 800177c:	d11c      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_ADC_ConfigChannel+0x288>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_ADC_ConfigChannel+0x288>)
 8001784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001788:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_ADC_ConfigChannel+0x280>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d111      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_ADC_ConfigChannel+0x28c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x290>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9a      	lsrs	r2, r3, #18
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017aa:	e002      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f9      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	10000012 	.word	0x10000012
 80017d4:	40012000 	.word	0x40012000
 80017d8:	40012300 	.word	0x40012300
 80017dc:	20000000 	.word	0x20000000
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017ec:	4b78      	ldr	r3, [pc, #480]	; (80019d0 <ADC_Init+0x1ec>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a77      	ldr	r2, [pc, #476]	; (80019d0 <ADC_Init+0x1ec>)
 80017f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017f8:	4b75      	ldr	r3, [pc, #468]	; (80019d0 <ADC_Init+0x1ec>)
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4973      	ldr	r1, [pc, #460]	; (80019d0 <ADC_Init+0x1ec>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	021a      	lsls	r2, r3, #8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001838:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <ADC_Init+0x1f0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001886:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e00f      	b.n	80018de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0202 	bic.w	r2, r2, #2
 80018ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6899      	ldr	r1, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	005a      	lsls	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d01b      	beq.n	8001944 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800192a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	3b01      	subs	r3, #1
 8001938:	035a      	lsls	r2, r3, #13
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	e007      	b.n	8001954 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001952:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	3b01      	subs	r3, #1
 8001970:	051a      	lsls	r2, r3, #20
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001996:	025a      	lsls	r2, r3, #9
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	029a      	lsls	r2, r3, #10
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40012300 	.word	0x40012300
 80019d4:	0f000001 	.word	0x0f000001

080019d8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d13c      	bne.n	8001a6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d12b      	bne.n	8001a64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d127      	bne.n	8001a64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d119      	bne.n	8001a64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0220 	bic.w	r2, r2, #32
 8001a3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7fe fd93 	bl	8000590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a6a:	e00e      	b.n	8001a8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff fd5f 	bl	800153c <HAL_ADC_ErrorCallback>
}
 8001a7e:	e004      	b.n	8001a8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fd41 	bl	8001528 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f043 0204 	orr.w	r2, r3, #4
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff fd34 	bl	800153c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	05fa0000 	.word	0x05fa0000

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff3e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff31 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa2 	bl	8001c38 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff face 	bl	80012ac <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e099      	b.n	8001e50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3c:	e00f      	b.n	8001d5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3e:	f7ff fab5 	bl	80012ac <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d908      	bls.n	8001d5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e078      	b.n	8001e50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e8      	bne.n	8001d3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_DMA_Init+0x158>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d107      	bne.n	8001dc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0307 	bic.w	r3, r3, #7
 8001dde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d117      	bne.n	8001e22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fa77 	bl	80022f8 <DMA_CheckFifoParam>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e016      	b.n	8001e50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa2e 	bl	800228c <DMA_CalcBaseAndBitshift>
 8001e30:	4603      	mov	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	223f      	movs	r2, #63	; 0x3f
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	e010803f 	.word	0xe010803f

08001e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Start_IT+0x26>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e048      	b.n	8001f14 <HAL_DMA_Start_IT+0xb8>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d137      	bne.n	8001f06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f9c0 	bl	8002230 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	223f      	movs	r2, #63	; 0x3f
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0216 	orr.w	r2, r2, #22
 8001eca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001eda:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0208 	orr.w	r2, r2, #8
 8001ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f28:	4b92      	ldr	r3, [pc, #584]	; (8002174 <HAL_DMA_IRQHandler+0x258>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_DMA_IRQHandler+0x25c>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	2208      	movs	r2, #8
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01a      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2208      	movs	r2, #8
 8001f76:	409a      	lsls	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2201      	movs	r2, #1
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	f043 0204 	orr.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d043      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d03c      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2210      	movs	r2, #16
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d024      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
 800204a:	e01f      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e016      	b.n	800208c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0208 	bic.w	r2, r2, #8
 800207a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	2220      	movs	r2, #32
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 808e 	beq.w	80021ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8086 	beq.w	80021ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2220      	movs	r2, #32
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d136      	bne.n	8002134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_IRQHandler+0x1da>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	223f      	movs	r2, #63	; 0x3f
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	2b00      	cmp	r3, #0
 8002128:	d07d      	beq.n	8002226 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	4798      	blx	r3
        }
        return;
 8002132:	e078      	b.n	8002226 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01c      	beq.n	800217c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	2b00      	cmp	r3, #0
 8002156:	d030      	beq.n	80021ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e02b      	b.n	80021ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d027      	beq.n	80021ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
 8002172:	e022      	b.n	80021ba <HAL_DMA_IRQHandler+0x29e>
 8002174:	20000000 	.word	0x20000000
 8002178:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0210 	bic.w	r2, r2, #16
 8002198:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d032      	beq.n	8002228 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	3301      	adds	r3, #1
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d307      	bcc.n	8002202 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f2      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x2ca>
 8002200:	e000      	b.n	8002204 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002202:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
 8002224:	e000      	b.n	8002228 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002226:	bf00      	nop
    }
  }
}
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop

08002230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800224c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b40      	cmp	r3, #64	; 0x40
 800225c:	d108      	bne.n	8002270 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800226e:	e007      	b.n	8002280 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3b10      	subs	r3, #16
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <DMA_CalcBaseAndBitshift+0x60>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <DMA_CalcBaseAndBitshift+0x64>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d908      	bls.n	80022cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <DMA_CalcBaseAndBitshift+0x68>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	1d1a      	adds	r2, r3, #4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58
 80022ca:	e006      	b.n	80022da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <DMA_CalcBaseAndBitshift+0x68>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	aaaaaaab 	.word	0xaaaaaaab
 80022f0:	08005030 	.word	0x08005030
 80022f4:	fffffc00 	.word	0xfffffc00

080022f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11f      	bne.n	8002352 <DMA_CheckFifoParam+0x5a>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d856      	bhi.n	80023c6 <DMA_CheckFifoParam+0xce>
 8002318:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x28>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002331 	.word	0x08002331
 8002324:	08002343 	.word	0x08002343
 8002328:	08002331 	.word	0x08002331
 800232c:	080023c7 	.word	0x080023c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d046      	beq.n	80023ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002340:	e043      	b.n	80023ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800234a:	d140      	bne.n	80023ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002350:	e03d      	b.n	80023ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235a:	d121      	bne.n	80023a0 <DMA_CheckFifoParam+0xa8>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d837      	bhi.n	80023d2 <DMA_CheckFifoParam+0xda>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <DMA_CheckFifoParam+0x70>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	0800237f 	.word	0x0800237f
 8002370:	08002379 	.word	0x08002379
 8002374:	08002391 	.word	0x08002391
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      break;
 800237c:	e030      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d025      	beq.n	80023d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238e:	e022      	b.n	80023d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002398:	d11f      	bne.n	80023da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800239e:	e01c      	b.n	80023da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d903      	bls.n	80023ae <DMA_CheckFifoParam+0xb6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d003      	beq.n	80023b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ac:	e018      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      break;
 80023b2:	e015      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e00b      	b.n	80023de <DMA_CheckFifoParam+0xe6>
      break;
 80023c6:	bf00      	nop
 80023c8:	e00a      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e008      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e006      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e004      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
    }
  } 
  
  return status; 
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e175      	b.n	80026fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 8164 	bne.w	80026f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d00b      	beq.n	800244e <HAL_GPIO_Init+0x5e>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002442:	2b11      	cmp	r3, #17
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b12      	cmp	r3, #18
 800244c:	d130      	bne.n	80024b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0201 	and.w	r2, r3, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x100>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b12      	cmp	r3, #18
 80024ee:	d123      	bne.n	8002538 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80be 	beq.w	80026f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_GPIO_Init+0x324>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a65      	ldr	r2, [pc, #404]	; (8002714 <HAL_GPIO_Init+0x324>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_GPIO_Init+0x324>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002592:	4a61      	ldr	r2, [pc, #388]	; (8002718 <HAL_GPIO_Init+0x328>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_GPIO_Init+0x32c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d037      	beq.n	800262e <HAL_GPIO_Init+0x23e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_GPIO_Init+0x330>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d031      	beq.n	800262a <HAL_GPIO_Init+0x23a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_GPIO_Init+0x334>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d02b      	beq.n	8002626 <HAL_GPIO_Init+0x236>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a55      	ldr	r2, [pc, #340]	; (8002728 <HAL_GPIO_Init+0x338>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d025      	beq.n	8002622 <HAL_GPIO_Init+0x232>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_GPIO_Init+0x33c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01f      	beq.n	800261e <HAL_GPIO_Init+0x22e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a53      	ldr	r2, [pc, #332]	; (8002730 <HAL_GPIO_Init+0x340>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x22a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_GPIO_Init+0x344>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x226>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <HAL_GPIO_Init+0x348>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x222>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a50      	ldr	r2, [pc, #320]	; (800273c <HAL_GPIO_Init+0x34c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x21e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_GPIO_Init+0x350>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x21a>
 8002606:	2309      	movs	r3, #9
 8002608:	e012      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800260a:	230a      	movs	r3, #10
 800260c:	e010      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800260e:	2308      	movs	r3, #8
 8002610:	e00e      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002612:	2307      	movs	r3, #7
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002616:	2306      	movs	r3, #6
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x240>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x240>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <HAL_GPIO_Init+0x328>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_GPIO_Init+0x354>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002672:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_GPIO_Init+0x354>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_GPIO_Init+0x354>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269c:	4a29      	ldr	r2, [pc, #164]	; (8002744 <HAL_GPIO_Init+0x354>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_GPIO_Init+0x354>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae86 	bls.w	8002410 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40021400 	.word	0x40021400
 8002734:	40021800 	.word	0x40021800
 8002738:	40021c00 	.word	0x40021c00
 800273c:	40022000 	.word	0x40022000
 8002740:	40022400 	.word	0x40022400
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800279a:	e002      	b.n	80027a2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800279c:	887a      	ldrh	r2, [r7, #2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000

080027d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_PWREx_EnableOverDrive+0x98>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fe:	f7fe fd55 	bl	80012ac <HAL_GetTick>
 8002802:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002804:	e009      	b.n	800281a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002806:	f7fe fd51 	bl	80012ac <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002814:	d901      	bls.n	800281a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e022      	b.n	8002860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d1ee      	bne.n	8002806 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 800282e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002834:	f7fe fd3a 	bl	80012ac <HAL_GetTick>
 8002838:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800283a:	e009      	b.n	8002850 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800283c:	f7fe fd36 	bl	80012ac <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284a:	d901      	bls.n	8002850 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e007      	b.n	8002860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800285c:	d1ee      	bne.n	800283c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000

08002870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e29b      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8087 	beq.w	80029a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b04      	cmp	r3, #4
 800289e:	d00c      	beq.n	80028ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a0:	4b93      	ldr	r3, [pc, #588]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d112      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62>
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b8:	d10b      	bne.n	80028d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x130>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d168      	bne.n	80029a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e275      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x7a>
 80028dc:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a83      	ldr	r2, [pc, #524]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x9c>
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80028f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7b      	ldr	r2, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0xc0>
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xd8>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b6c      	ldr	r3, [pc, #432]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fcac 	bl	80012ac <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002958:	f7fe fca8 	bl	80012ac <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e229      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xe8>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fc98 	bl	80012ac <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fc94 	bl	80012ac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e215      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x110>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d069      	beq.n	8002a82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x190>
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x17a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1e9      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	493d      	ldr	r1, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e040      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fc4a 	bl	80012ac <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fc46 	bl	80012ac <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1c7      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
 8002a4e:	e018      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fc26 	bl	80012ac <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fe fc22 	bl	80012ac <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1a3      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d038      	beq.n	8002b00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fc03 	bl	80012ac <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fbff 	bl	80012ac <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e180      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x23a>
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fbe9 	bl	80012ac <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe fbe5 	bl	80012ac <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d903      	bls.n	8002af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e166      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
 8002af0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b92      	ldr	r3, [pc, #584]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a4 	beq.w	8002c56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a88      	ldr	r2, [pc, #544]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b86      	ldr	r3, [pc, #536]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b36:	4b83      	ldr	r3, [pc, #524]	; (8002d44 <HAL_RCC_OscConfig+0x4d4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b42:	4b80      	ldr	r3, [pc, #512]	; (8002d44 <HAL_RCC_OscConfig+0x4d4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7f      	ldr	r2, [pc, #508]	; (8002d44 <HAL_RCC_OscConfig+0x4d4>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fbad 	bl	80012ac <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7fe fba9 	bl	80012ac <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e12a      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b68:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x4d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x31a>
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a6f      	ldr	r2, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	e02d      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x33c>
 8002b92:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a6a      	ldr	r2, [pc, #424]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	e01c      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x35e>
 8002bb4:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a61      	ldr	r2, [pc, #388]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a5e      	ldr	r2, [pc, #376]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0x376>
 8002bce:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	4a5b      	ldr	r2, [pc, #364]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bda:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d015      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fe fb5d 	bl	80012ac <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fb59 	bl	80012ac <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0d8      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x386>
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fb47 	bl	80012ac <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fb43 	bl	80012ac <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e0c2      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a3c      	ldr	r2, [pc, #240]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80ae 	beq.w	8002dbc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c60:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d06d      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d14b      	bne.n	8002d0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a31      	ldr	r2, [pc, #196]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fb14 	bl	80012ac <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fb10 	bl	80012ac <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e091      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	491b      	ldr	r1, [pc, #108]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fae2 	bl	80012ac <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fade 	bl	80012ac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e05f      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x47c>
 8002d0a:	e057      	b.n	8002dbc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fac8 	bl	80012ac <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fac4 	bl	80012ac <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e045      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x4b0>
 8002d3e:	e03d      	b.n	8002dbc <HAL_RCC_OscConfig+0x54c>
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d48:	4b1f      	ldr	r3, [pc, #124]	; (8002dc8 <HAL_RCC_OscConfig+0x558>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d030      	beq.n	8002db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d129      	bne.n	8002db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d122      	bne.n	8002db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d119      	bne.n	8002db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d10f      	bne.n	8002db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d0      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	4965      	ldr	r1, [pc, #404]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b63      	ldr	r3, [pc, #396]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b8      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	494d      	ldr	r1, [pc, #308]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d040      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d115      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e07f      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e073      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e06b      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4936      	ldr	r1, [pc, #216]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fe f9f4 	bl	80012ac <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fe f9f0 	bl	80012ac <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e053      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d210      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 020f 	bic.w	r2, r3, #15
 8002f06:	4922      	ldr	r1, [pc, #136]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e032      	b.n	8002f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5e:	f000 f821 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490a      	ldr	r1, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1d0>)
 8002f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1d4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f950 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023c00 	.word	0x40023c00
 8002f94:	40023800 	.word	0x40023800
 8002f98:	08005018 	.word	0x08005018
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	f200 80bd 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0x3a>
 8002fd6:	e0b7      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fda:	60bb      	str	r3, [r7, #8]
      break;
 8002fdc:	e0b7      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fe0:	60bb      	str	r3, [r7, #8]
      break;
 8002fe2:	e0b4      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe4:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fee:	4b5b      	ldr	r3, [pc, #364]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d04d      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b58      	ldr	r3, [pc, #352]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	461a      	mov	r2, r3
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	ea02 0800 	and.w	r8, r2, r0
 8003012:	ea03 0901 	and.w	r9, r3, r1
 8003016:	4640      	mov	r0, r8
 8003018:	4649      	mov	r1, r9
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	014b      	lsls	r3, r1, #5
 8003024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003028:	0142      	lsls	r2, r0, #5
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	ebb0 0008 	subs.w	r0, r0, r8
 8003032:	eb61 0109 	sbc.w	r1, r1, r9
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	018b      	lsls	r3, r1, #6
 8003040:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003044:	0182      	lsls	r2, r0, #6
 8003046:	1a12      	subs	r2, r2, r0
 8003048:	eb63 0301 	sbc.w	r3, r3, r1
 800304c:	f04f 0000 	mov.w	r0, #0
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	00d9      	lsls	r1, r3, #3
 8003056:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305a:	00d0      	lsls	r0, r2, #3
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	eb12 0208 	adds.w	r2, r2, r8
 8003064:	eb43 0309 	adc.w	r3, r3, r9
 8003068:	f04f 0000 	mov.w	r0, #0
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	0259      	lsls	r1, r3, #9
 8003072:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003076:	0250      	lsls	r0, r2, #9
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f7fd f8d6 	bl	8000238 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e04a      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	461a      	mov	r2, r3
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	ea02 0400 	and.w	r4, r2, r0
 80030ae:	ea03 0501 	and.w	r5, r3, r1
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	014b      	lsls	r3, r1, #5
 80030c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030c4:	0142      	lsls	r2, r0, #5
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	1b00      	subs	r0, r0, r4
 80030cc:	eb61 0105 	sbc.w	r1, r1, r5
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	018b      	lsls	r3, r1, #6
 80030da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030de:	0182      	lsls	r2, r0, #6
 80030e0:	1a12      	subs	r2, r2, r0
 80030e2:	eb63 0301 	sbc.w	r3, r3, r1
 80030e6:	f04f 0000 	mov.w	r0, #0
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	00d9      	lsls	r1, r3, #3
 80030f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030f4:	00d0      	lsls	r0, r2, #3
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	1912      	adds	r2, r2, r4
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0299      	lsls	r1, r3, #10
 800310a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800310e:	0290      	lsls	r0, r2, #10
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	461a      	mov	r2, r3
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	f7fd f88a 	bl	8000238 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60bb      	str	r3, [r7, #8]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800314a:	60bb      	str	r3, [r7, #8]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	68bb      	ldr	r3, [r7, #8]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	08005028 	.word	0x08005028

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffdc 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0b5b      	lsrs	r3, r3, #13
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08005028 	.word	0x08005028

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d012      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031f8:	4b69      	ldr	r3, [pc, #420]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a68      	ldr	r2, [pc, #416]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	4964      	ldr	r1, [pc, #400]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d017      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003230:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	4959      	ldr	r1, [pc, #356]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003248:	d101      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003256:	2301      	movs	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d017      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003266:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	494a      	ldr	r1, [pc, #296]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003284:	d101      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003286:	2301      	movs	r3, #1
 8003288:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 808b 	beq.w	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	4a39      	ldr	r2, [pc, #228]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6413      	str	r3, [r2, #64]	; 0x40
 80032c0:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032cc:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a34      	ldr	r2, [pc, #208]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd ffe8 	bl	80012ac <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fd ffe4 	bl	80012ac <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e38d      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032fe:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d035      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	429a      	cmp	r2, r3
 800331a:	d02e      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331c:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800333e:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003344:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d114      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fd ffac 	bl	80012ac <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fd ffa8 	bl	80012ac <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e34f      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0ee      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003386:	d111      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003396:	400b      	ands	r3, r1
 8003398:	4901      	ldr	r1, [pc, #4]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
 800339e:	e00b      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
 80033a8:	0ffffcff 	.word	0x0ffffcff
 80033ac:	4bb3      	ldr	r3, [pc, #716]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4ab2      	ldr	r2, [pc, #712]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033b6:	6093      	str	r3, [r2, #8]
 80033b8:	4bb0      	ldr	r3, [pc, #704]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	49ad      	ldr	r1, [pc, #692]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033d6:	4ba9      	ldr	r3, [pc, #676]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033dc:	4aa7      	ldr	r2, [pc, #668]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033e6:	4ba5      	ldr	r3, [pc, #660]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	49a2      	ldr	r1, [pc, #648]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003404:	4b9d      	ldr	r3, [pc, #628]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003412:	499a      	ldr	r1, [pc, #616]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003426:	4b95      	ldr	r3, [pc, #596]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	4991      	ldr	r1, [pc, #580]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003448:	4b8c      	ldr	r3, [pc, #560]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003456:	4989      	ldr	r1, [pc, #548]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800346a:	4b84      	ldr	r3, [pc, #528]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4980      	ldr	r1, [pc, #512]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348c:	4b7b      	ldr	r3, [pc, #492]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4978      	ldr	r1, [pc, #480]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f023 020c 	bic.w	r2, r3, #12
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034bc:	496f      	ldr	r1, [pc, #444]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	4967      	ldr	r1, [pc, #412]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034f2:	4b62      	ldr	r3, [pc, #392]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	495e      	ldr	r1, [pc, #376]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	4956      	ldr	r1, [pc, #344]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003536:	4b51      	ldr	r3, [pc, #324]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	494d      	ldr	r1, [pc, #308]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003558:	4b48      	ldr	r3, [pc, #288]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	4945      	ldr	r1, [pc, #276]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003588:	493c      	ldr	r1, [pc, #240]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800359c:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035aa:	4934      	ldr	r1, [pc, #208]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d011      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035be:	4b2f      	ldr	r3, [pc, #188]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035cc:	492b      	ldr	r1, [pc, #172]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	491b      	ldr	r1, [pc, #108]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003630:	4912      	ldr	r1, [pc, #72]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003654:	4909      	ldr	r1, [pc, #36]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	e002      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	4985      	ldr	r1, [pc, #532]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003694:	4b80      	ldr	r3, [pc, #512]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a4:	497c      	ldr	r1, [pc, #496]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d005      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ba:	f040 80d6 	bne.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036be:	4b76      	ldr	r3, [pc, #472]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a75      	ldr	r2, [pc, #468]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ca:	f7fd fdef 	bl	80012ac <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036d2:	f7fd fdeb 	bl	80012ac <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b64      	cmp	r3, #100	; 0x64
 80036de:	d901      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e194      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036e4:	4b6c      	ldr	r3, [pc, #432]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d021      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11d      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003704:	4b64      	ldr	r3, [pc, #400]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003712:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003718:	0e1b      	lsrs	r3, r3, #24
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	019a      	lsls	r2, r3, #6
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	071b      	lsls	r3, r3, #28
 8003738:	4957      	ldr	r1, [pc, #348]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02e      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d129      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800376c:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800376e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800377a:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	0f1b      	lsrs	r3, r3, #28
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	019a      	lsls	r2, r3, #6
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	071b      	lsls	r3, r3, #28
 80037a0:	493d      	ldr	r1, [pc, #244]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ae:	f023 021f 	bic.w	r2, r3, #31
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	3b01      	subs	r3, #1
 80037b8:	4937      	ldr	r1, [pc, #220]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01d      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d2:	0e1b      	lsrs	r3, r3, #24
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037da:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e0:	0f1b      	lsrs	r3, r3, #28
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	019a      	lsls	r2, r3, #6
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	431a      	orrs	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	431a      	orrs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	071b      	lsls	r3, r3, #28
 8003800:	4925      	ldr	r1, [pc, #148]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d011      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	019a      	lsls	r2, r3, #6
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	071b      	lsls	r3, r3, #28
 8003830:	4919      	ldr	r1, [pc, #100]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800383e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fd fd32 	bl	80012ac <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800384c:	f7fd fd2e 	bl	80012ac <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0d7      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 80cd 	bne.w	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387e:	f7fd fd15 	bl	80012ac <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003884:	e00a      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003886:	f7fd fd11 	bl	80012ac <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	; 0x64
 8003892:	d903      	bls.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e0ba      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003898:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800389c:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a8:	d0ed      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02e      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d12a      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038d2:	4b51      	ldr	r3, [pc, #324]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e0:	4b4d      	ldr	r3, [pc, #308]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e6:	0f1b      	lsrs	r3, r3, #28
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	019a      	lsls	r2, r3, #6
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	061b      	lsls	r3, r3, #24
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	4944      	ldr	r1, [pc, #272]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800390e:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003914:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	493d      	ldr	r1, [pc, #244]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d022      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393c:	d11d      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800393e:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	0e1b      	lsrs	r3, r3, #24
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	0f1b      	lsrs	r3, r3, #28
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	019a      	lsls	r2, r3, #6
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	071b      	lsls	r3, r3, #28
 8003972:	4929      	ldr	r1, [pc, #164]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	0e1b      	lsrs	r3, r3, #24
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	019a      	lsls	r2, r3, #6
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	041b      	lsls	r3, r3, #16
 80039ac:	431a      	orrs	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	4917      	ldr	r1, [pc, #92]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4911      	ldr	r1, [pc, #68]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e4:	f7fd fc62 	bl	80012ac <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039ec:	f7fd fc5e 	bl	80012ac <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e007      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a0a:	d1ef      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e01d      	b.n	8003a6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fad4 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 f95a 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d122      	bne.n	8003ace <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d11b      	bne.n	8003ace <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f06f 0202 	mvn.w	r2, #2
 8003a9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f90f 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003aba:	e005      	b.n	8003ac8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f901 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f912 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d122      	bne.n	8003b22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d11b      	bne.n	8003b22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f06f 0204 	mvn.w	r2, #4
 8003af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f8e5 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003b0e:	e005      	b.n	8003b1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8d7 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8e8 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d122      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11b      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0208 	mvn.w	r2, #8
 8003b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8bb 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003b62:	e005      	b.n	8003b70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f8ad 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8be 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d122      	bne.n	8003bca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d11b      	bne.n	8003bca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f06f 0210 	mvn.w	r2, #16
 8003b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f891 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003bb6:	e005      	b.n	8003bc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f883 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f894 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0201 	mvn.w	r2, #1
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f85d 	bl	8003cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d10e      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f9b1 	bl	8003f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c30:	d10e      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d107      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9a4 	bl	8003f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d10e      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d107      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f842 	bl	8003d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0220 	mvn.w	r2, #32
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f964 	bl	8003f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a40      	ldr	r2, [pc, #256]	; (8003e28 <TIM_Base_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d32:	d00f      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a3d      	ldr	r2, [pc, #244]	; (8003e2c <TIM_Base_SetConfig+0x118>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00b      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3c      	ldr	r2, [pc, #240]	; (8003e30 <TIM_Base_SetConfig+0x11c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <TIM_Base_SetConfig+0x120>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3a      	ldr	r2, [pc, #232]	; (8003e38 <TIM_Base_SetConfig+0x124>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d108      	bne.n	8003d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <TIM_Base_SetConfig+0x114>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d027      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <TIM_Base_SetConfig+0x118>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d023      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <TIM_Base_SetConfig+0x11c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <TIM_Base_SetConfig+0x120>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <TIM_Base_SetConfig+0x124>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d017      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <TIM_Base_SetConfig+0x128>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <TIM_Base_SetConfig+0x12c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <TIM_Base_SetConfig+0x130>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00b      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <TIM_Base_SetConfig+0x134>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d007      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a24      	ldr	r2, [pc, #144]	; (8003e4c <TIM_Base_SetConfig+0x138>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <TIM_Base_SetConfig+0x13c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <TIM_Base_SetConfig+0x114>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <TIM_Base_SetConfig+0x124>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d103      	bne.n	8003e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	615a      	str	r2, [r3, #20]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	40001800 	.word	0x40001800
 8003e4c:	40001c00 	.word	0x40001c00
 8003e50:	40002000 	.word	0x40002000

08003e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e06d      	b.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d01d      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10c      	bne.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40001800 	.word	0x40001800

08003f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e040      	b.n	8004040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd f850 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f82c 	bl	8004048 <UART_SetConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e022      	b.n	8004040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 facc 	bl	80045a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb53 	bl	80046e4 <UART_CheckIdleState>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004050:	2300      	movs	r3, #0
 8004052:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4ba7      	ldr	r3, [pc, #668]	; (8004314 <UART_SetConfig+0x2cc>)
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	430b      	orrs	r3, r1
 8004082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a95      	ldr	r2, [pc, #596]	; (8004318 <UART_SetConfig+0x2d0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d120      	bne.n	800410a <UART_SetConfig+0xc2>
 80040c8:	4b94      	ldr	r3, [pc, #592]	; (800431c <UART_SetConfig+0x2d4>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d816      	bhi.n	8004104 <UART_SetConfig+0xbc>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <UART_SetConfig+0x94>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040f9 	.word	0x080040f9
 80040e4:	080040f3 	.word	0x080040f3
 80040e8:	080040ff 	.word	0x080040ff
 80040ec:	2301      	movs	r3, #1
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e14f      	b.n	8004392 <UART_SetConfig+0x34a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e14c      	b.n	8004392 <UART_SetConfig+0x34a>
 80040f8:	2304      	movs	r3, #4
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e149      	b.n	8004392 <UART_SetConfig+0x34a>
 80040fe:	2308      	movs	r3, #8
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e146      	b.n	8004392 <UART_SetConfig+0x34a>
 8004104:	2310      	movs	r3, #16
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e143      	b.n	8004392 <UART_SetConfig+0x34a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a84      	ldr	r2, [pc, #528]	; (8004320 <UART_SetConfig+0x2d8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d132      	bne.n	800417a <UART_SetConfig+0x132>
 8004114:	4b81      	ldr	r3, [pc, #516]	; (800431c <UART_SetConfig+0x2d4>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d828      	bhi.n	8004174 <UART_SetConfig+0x12c>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0xe0>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004175 	.word	0x08004175
 8004130:	08004175 	.word	0x08004175
 8004134:	08004175 	.word	0x08004175
 8004138:	08004169 	.word	0x08004169
 800413c:	08004175 	.word	0x08004175
 8004140:	08004175 	.word	0x08004175
 8004144:	08004175 	.word	0x08004175
 8004148:	08004163 	.word	0x08004163
 800414c:	08004175 	.word	0x08004175
 8004150:	08004175 	.word	0x08004175
 8004154:	08004175 	.word	0x08004175
 8004158:	0800416f 	.word	0x0800416f
 800415c:	2300      	movs	r3, #0
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e117      	b.n	8004392 <UART_SetConfig+0x34a>
 8004162:	2302      	movs	r3, #2
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e114      	b.n	8004392 <UART_SetConfig+0x34a>
 8004168:	2304      	movs	r3, #4
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e111      	b.n	8004392 <UART_SetConfig+0x34a>
 800416e:	2308      	movs	r3, #8
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e10e      	b.n	8004392 <UART_SetConfig+0x34a>
 8004174:	2310      	movs	r3, #16
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e10b      	b.n	8004392 <UART_SetConfig+0x34a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a69      	ldr	r2, [pc, #420]	; (8004324 <UART_SetConfig+0x2dc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d120      	bne.n	80041c6 <UART_SetConfig+0x17e>
 8004184:	4b65      	ldr	r3, [pc, #404]	; (800431c <UART_SetConfig+0x2d4>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800418e:	2b30      	cmp	r3, #48	; 0x30
 8004190:	d013      	beq.n	80041ba <UART_SetConfig+0x172>
 8004192:	2b30      	cmp	r3, #48	; 0x30
 8004194:	d814      	bhi.n	80041c0 <UART_SetConfig+0x178>
 8004196:	2b20      	cmp	r3, #32
 8004198:	d009      	beq.n	80041ae <UART_SetConfig+0x166>
 800419a:	2b20      	cmp	r3, #32
 800419c:	d810      	bhi.n	80041c0 <UART_SetConfig+0x178>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0x160>
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x16c>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x178>
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e0f1      	b.n	8004392 <UART_SetConfig+0x34a>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e0ee      	b.n	8004392 <UART_SetConfig+0x34a>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e0eb      	b.n	8004392 <UART_SetConfig+0x34a>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e0e8      	b.n	8004392 <UART_SetConfig+0x34a>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e0e5      	b.n	8004392 <UART_SetConfig+0x34a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a57      	ldr	r2, [pc, #348]	; (8004328 <UART_SetConfig+0x2e0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d120      	bne.n	8004212 <UART_SetConfig+0x1ca>
 80041d0:	4b52      	ldr	r3, [pc, #328]	; (800431c <UART_SetConfig+0x2d4>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041da:	2bc0      	cmp	r3, #192	; 0xc0
 80041dc:	d013      	beq.n	8004206 <UART_SetConfig+0x1be>
 80041de:	2bc0      	cmp	r3, #192	; 0xc0
 80041e0:	d814      	bhi.n	800420c <UART_SetConfig+0x1c4>
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d009      	beq.n	80041fa <UART_SetConfig+0x1b2>
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d810      	bhi.n	800420c <UART_SetConfig+0x1c4>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <UART_SetConfig+0x1ac>
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d006      	beq.n	8004200 <UART_SetConfig+0x1b8>
 80041f2:	e00b      	b.n	800420c <UART_SetConfig+0x1c4>
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e0cb      	b.n	8004392 <UART_SetConfig+0x34a>
 80041fa:	2302      	movs	r3, #2
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e0c8      	b.n	8004392 <UART_SetConfig+0x34a>
 8004200:	2304      	movs	r3, #4
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e0c5      	b.n	8004392 <UART_SetConfig+0x34a>
 8004206:	2308      	movs	r3, #8
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e0c2      	b.n	8004392 <UART_SetConfig+0x34a>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e0bf      	b.n	8004392 <UART_SetConfig+0x34a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a45      	ldr	r2, [pc, #276]	; (800432c <UART_SetConfig+0x2e4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d125      	bne.n	8004268 <UART_SetConfig+0x220>
 800421c:	4b3f      	ldr	r3, [pc, #252]	; (800431c <UART_SetConfig+0x2d4>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422a:	d017      	beq.n	800425c <UART_SetConfig+0x214>
 800422c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004230:	d817      	bhi.n	8004262 <UART_SetConfig+0x21a>
 8004232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004236:	d00b      	beq.n	8004250 <UART_SetConfig+0x208>
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d811      	bhi.n	8004262 <UART_SetConfig+0x21a>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <UART_SetConfig+0x202>
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d006      	beq.n	8004256 <UART_SetConfig+0x20e>
 8004248:	e00b      	b.n	8004262 <UART_SetConfig+0x21a>
 800424a:	2300      	movs	r3, #0
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e0a0      	b.n	8004392 <UART_SetConfig+0x34a>
 8004250:	2302      	movs	r3, #2
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e09d      	b.n	8004392 <UART_SetConfig+0x34a>
 8004256:	2304      	movs	r3, #4
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e09a      	b.n	8004392 <UART_SetConfig+0x34a>
 800425c:	2308      	movs	r3, #8
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e097      	b.n	8004392 <UART_SetConfig+0x34a>
 8004262:	2310      	movs	r3, #16
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e094      	b.n	8004392 <UART_SetConfig+0x34a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a30      	ldr	r2, [pc, #192]	; (8004330 <UART_SetConfig+0x2e8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d125      	bne.n	80042be <UART_SetConfig+0x276>
 8004272:	4b2a      	ldr	r3, [pc, #168]	; (800431c <UART_SetConfig+0x2d4>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800427c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004280:	d017      	beq.n	80042b2 <UART_SetConfig+0x26a>
 8004282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004286:	d817      	bhi.n	80042b8 <UART_SetConfig+0x270>
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428c:	d00b      	beq.n	80042a6 <UART_SetConfig+0x25e>
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004292:	d811      	bhi.n	80042b8 <UART_SetConfig+0x270>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <UART_SetConfig+0x258>
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d006      	beq.n	80042ac <UART_SetConfig+0x264>
 800429e:	e00b      	b.n	80042b8 <UART_SetConfig+0x270>
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e075      	b.n	8004392 <UART_SetConfig+0x34a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e072      	b.n	8004392 <UART_SetConfig+0x34a>
 80042ac:	2304      	movs	r3, #4
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e06f      	b.n	8004392 <UART_SetConfig+0x34a>
 80042b2:	2308      	movs	r3, #8
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e06c      	b.n	8004392 <UART_SetConfig+0x34a>
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e069      	b.n	8004392 <UART_SetConfig+0x34a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <UART_SetConfig+0x2ec>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d137      	bne.n	8004338 <UART_SetConfig+0x2f0>
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <UART_SetConfig+0x2d4>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042d6:	d017      	beq.n	8004308 <UART_SetConfig+0x2c0>
 80042d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042dc:	d817      	bhi.n	800430e <UART_SetConfig+0x2c6>
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e2:	d00b      	beq.n	80042fc <UART_SetConfig+0x2b4>
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e8:	d811      	bhi.n	800430e <UART_SetConfig+0x2c6>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <UART_SetConfig+0x2ae>
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d006      	beq.n	8004302 <UART_SetConfig+0x2ba>
 80042f4:	e00b      	b.n	800430e <UART_SetConfig+0x2c6>
 80042f6:	2300      	movs	r3, #0
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e04a      	b.n	8004392 <UART_SetConfig+0x34a>
 80042fc:	2302      	movs	r3, #2
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e047      	b.n	8004392 <UART_SetConfig+0x34a>
 8004302:	2304      	movs	r3, #4
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e044      	b.n	8004392 <UART_SetConfig+0x34a>
 8004308:	2308      	movs	r3, #8
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e041      	b.n	8004392 <UART_SetConfig+0x34a>
 800430e:	2310      	movs	r3, #16
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e03e      	b.n	8004392 <UART_SetConfig+0x34a>
 8004314:	efff69f3 	.word	0xefff69f3
 8004318:	40011000 	.word	0x40011000
 800431c:	40023800 	.word	0x40023800
 8004320:	40004400 	.word	0x40004400
 8004324:	40004800 	.word	0x40004800
 8004328:	40004c00 	.word	0x40004c00
 800432c:	40005000 	.word	0x40005000
 8004330:	40011400 	.word	0x40011400
 8004334:	40007800 	.word	0x40007800
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a94      	ldr	r2, [pc, #592]	; (8004590 <UART_SetConfig+0x548>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d125      	bne.n	800438e <UART_SetConfig+0x346>
 8004342:	4b94      	ldr	r3, [pc, #592]	; (8004594 <UART_SetConfig+0x54c>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800434c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004350:	d017      	beq.n	8004382 <UART_SetConfig+0x33a>
 8004352:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004356:	d817      	bhi.n	8004388 <UART_SetConfig+0x340>
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435c:	d00b      	beq.n	8004376 <UART_SetConfig+0x32e>
 800435e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004362:	d811      	bhi.n	8004388 <UART_SetConfig+0x340>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <UART_SetConfig+0x328>
 8004368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436c:	d006      	beq.n	800437c <UART_SetConfig+0x334>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x340>
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e00d      	b.n	8004392 <UART_SetConfig+0x34a>
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e00a      	b.n	8004392 <UART_SetConfig+0x34a>
 800437c:	2304      	movs	r3, #4
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e007      	b.n	8004392 <UART_SetConfig+0x34a>
 8004382:	2308      	movs	r3, #8
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e004      	b.n	8004392 <UART_SetConfig+0x34a>
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e001      	b.n	8004392 <UART_SetConfig+0x34a>
 800438e:	2310      	movs	r3, #16
 8004390:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439a:	d17f      	bne.n	800449c <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d85c      	bhi.n	800445c <UART_SetConfig+0x414>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0x360>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043cd 	.word	0x080043cd
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	0800440d 	.word	0x0800440d
 80043b4:	0800445d 	.word	0x0800445d
 80043b8:	08004425 	.word	0x08004425
 80043bc:	0800445d 	.word	0x0800445d
 80043c0:	0800445d 	.word	0x0800445d
 80043c4:	0800445d 	.word	0x0800445d
 80043c8:	08004445 	.word	0x08004445
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043cc:	f7fe fed8 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80043d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	005a      	lsls	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	61bb      	str	r3, [r7, #24]
        break;
 80043ea:	e03a      	b.n	8004462 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe fedc 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 80043f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	005a      	lsls	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	b29b      	uxth	r3, r3
 8004408:	61bb      	str	r3, [r7, #24]
        break;
 800440a:	e02a      	b.n	8004462 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	085a      	lsrs	r2, r3, #1
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <UART_SetConfig+0x550>)
 8004414:	4413      	add	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6852      	ldr	r2, [r2, #4]
 800441a:	fbb3 f3f2 	udiv	r3, r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	61bb      	str	r3, [r7, #24]
        break;
 8004422:	e01e      	b.n	8004462 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004424:	f7fe fdbe 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004428:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	005a      	lsls	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	61bb      	str	r3, [r7, #24]
        break;
 8004442:	e00e      	b.n	8004462 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	b29b      	uxth	r3, r3
 8004458:	61bb      	str	r3, [r7, #24]
        break;
 800445a:	e002      	b.n	8004462 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]
        break;
 8004460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d916      	bls.n	8004496 <UART_SetConfig+0x44e>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d212      	bcs.n	8004496 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f023 030f 	bic.w	r3, r3, #15
 8004478:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	b29b      	uxth	r3, r3
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	b29a      	uxth	r2, r3
 8004486:	897b      	ldrh	r3, [r7, #10]
 8004488:	4313      	orrs	r3, r2
 800448a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	897a      	ldrh	r2, [r7, #10]
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	e070      	b.n	8004578 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
 800449a:	e06d      	b.n	8004578 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800449c:	7ffb      	ldrb	r3, [r7, #31]
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d859      	bhi.n	8004556 <UART_SetConfig+0x50e>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x460>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	08004509 	.word	0x08004509
 80044b4:	08004557 	.word	0x08004557
 80044b8:	08004521 	.word	0x08004521
 80044bc:	08004557 	.word	0x08004557
 80044c0:	08004557 	.word	0x08004557
 80044c4:	08004557 	.word	0x08004557
 80044c8:	0800453f 	.word	0x0800453f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe fe58 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	085a      	lsrs	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	61bb      	str	r3, [r7, #24]
        break;
 80044e8:	e038      	b.n	800455c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ea:	f7fe fe5d 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 80044ee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	085a      	lsrs	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	61bb      	str	r3, [r7, #24]
        break;
 8004506:	e029      	b.n	800455c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	085a      	lsrs	r2, r3, #1
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <UART_SetConfig+0x554>)
 8004510:	4413      	add	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6852      	ldr	r2, [r2, #4]
 8004516:	fbb3 f3f2 	udiv	r3, r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	61bb      	str	r3, [r7, #24]
        break;
 800451e:	e01d      	b.n	800455c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004520:	f7fe fd40 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004524:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	085a      	lsrs	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	61bb      	str	r3, [r7, #24]
        break;
 800453c:	e00e      	b.n	800455c <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	61bb      	str	r3, [r7, #24]
        break;
 8004554:	e002      	b.n	800455c <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
        break;
 800455a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d908      	bls.n	8004574 <UART_SetConfig+0x52c>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d204      	bcs.n	8004574 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	e001      	b.n	8004578 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40007c00 	.word	0x40007c00
 8004594:	40023800 	.word	0x40023800
 8004598:	01e84800 	.word	0x01e84800
 800459c:	00f42400 	.word	0x00f42400

080045a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01a      	beq.n	80046b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d10a      	bne.n	80046b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046f2:	f7fc fddb 	bl	80012ac <HAL_GetTick>
 80046f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d10e      	bne.n	8004724 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004706:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f82a 	bl	800476e <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e020      	b.n	8004766 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d10e      	bne.n	8004750 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004732:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f814 	bl	800476e <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e00a      	b.n	8004766 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477e:	e05d      	b.n	800483c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004786:	d059      	beq.n	800483c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004788:	f7fc fd90 	bl	80012ac <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d302      	bcc.n	800479e <UART_WaitOnFlagUntilTimeout+0x30>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d11b      	bne.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e042      	b.n	800485c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02b      	beq.n	800483c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f2:	d123      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800480c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e00f      	b.n	800485c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4013      	ands	r3, r2
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	429a      	cmp	r2, r3
 8004858:	d092      	beq.n	8004780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <__errno>:
 8004864:	4b01      	ldr	r3, [pc, #4]	; (800486c <__errno+0x8>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4d0d      	ldr	r5, [pc, #52]	; (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	; (80048ac <__libc_init_array+0x3c>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2600      	movs	r6, #0
 800487c:	42a6      	cmp	r6, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4d0b      	ldr	r5, [pc, #44]	; (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x44>)
 8004884:	f000 fbbc 	bl	8005000 <_init>
 8004888:	1b64      	subs	r4, r4, r5
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2600      	movs	r6, #0
 800488e:	42a6      	cmp	r6, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f855 3b04 	ldr.w	r3, [r5], #4
 8004898:	4798      	blx	r3
 800489a:	3601      	adds	r6, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a2:	4798      	blx	r3
 80048a4:	3601      	adds	r6, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	080068f8 	.word	0x080068f8
 80048ac:	080068f8 	.word	0x080068f8
 80048b0:	080068f8 	.word	0x080068f8
 80048b4:	080068fc 	.word	0x080068fc

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <checkint>:
 80048c8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80048cc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80048d0:	429a      	cmp	r2, r3
 80048d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d4:	dd2b      	ble.n	800492e <checkint+0x66>
 80048d6:	f240 4333 	movw	r3, #1075	; 0x433
 80048da:	429a      	cmp	r2, r3
 80048dc:	dc25      	bgt.n	800492a <checkint+0x62>
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	f1a3 0620 	sub.w	r6, r3, #32
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295
 80048e8:	fa02 f606 	lsl.w	r6, r2, r6
 80048ec:	fa02 f403 	lsl.w	r4, r2, r3
 80048f0:	f1c3 0520 	rsb	r5, r3, #32
 80048f4:	4334      	orrs	r4, r6
 80048f6:	fa22 f505 	lsr.w	r5, r2, r5
 80048fa:	432c      	orrs	r4, r5
 80048fc:	409a      	lsls	r2, r3
 80048fe:	ea20 0602 	bic.w	r6, r0, r2
 8004902:	ea21 0704 	bic.w	r7, r1, r4
 8004906:	ea56 0207 	orrs.w	r2, r6, r7
 800490a:	f1a3 0420 	sub.w	r4, r3, #32
 800490e:	f1c3 0220 	rsb	r2, r3, #32
 8004912:	d10c      	bne.n	800492e <checkint+0x66>
 8004914:	40d8      	lsrs	r0, r3
 8004916:	fa01 f302 	lsl.w	r3, r1, r2
 800491a:	4318      	orrs	r0, r3
 800491c:	40e1      	lsrs	r1, r4
 800491e:	4308      	orrs	r0, r1
 8004920:	f000 0301 	and.w	r3, r0, #1
 8004924:	f1c3 0002 	rsb	r0, r3, #2
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	2002      	movs	r0, #2
 800492c:	e7fc      	b.n	8004928 <checkint+0x60>
 800492e:	2000      	movs	r0, #0
 8004930:	e7fa      	b.n	8004928 <checkint+0x60>
 8004932:	0000      	movs	r0, r0
 8004934:	0000      	movs	r0, r0
	...

08004938 <pow>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	ed2d 8b0a 	vpush	{d8-d12}
 8004940:	b09b      	sub	sp, #108	; 0x6c
 8004942:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004946:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800494a:	ed8d 1b00 	vstr	d1, [sp]
 800494e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8004952:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004956:	f109 30ff 	add.w	r0, r9, #4294967295
 800495a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800495e:	4288      	cmp	r0, r1
 8004960:	46cc      	mov	ip, r9
 8004962:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8004966:	d806      	bhi.n	8004976 <pow+0x3e>
 8004968:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800496c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8004970:	297f      	cmp	r1, #127	; 0x7f
 8004972:	f240 81ab 	bls.w	8004ccc <pow+0x394>
 8004976:	19b1      	adds	r1, r6, r6
 8004978:	9104      	str	r1, [sp, #16]
 800497a:	eb47 0107 	adc.w	r1, r7, r7
 800497e:	9105      	str	r1, [sp, #20]
 8004980:	9904      	ldr	r1, [sp, #16]
 8004982:	f111 31ff 	adds.w	r1, r1, #4294967295
 8004986:	460a      	mov	r2, r1
 8004988:	9905      	ldr	r1, [sp, #20]
 800498a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800498e:	460b      	mov	r3, r1
 8004990:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8004994:	f06f 0001 	mvn.w	r0, #1
 8004998:	4299      	cmp	r1, r3
 800499a:	bf08      	it	eq
 800499c:	4290      	cmpeq	r0, r2
 800499e:	d260      	bcs.n	8004a62 <pow+0x12a>
 80049a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d11a      	bne.n	80049de <pow+0xa6>
 80049a8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 80049ac:	1923      	adds	r3, r4, r4
 80049ae:	930c      	str	r3, [sp, #48]	; 0x30
 80049b0:	eb42 0302 	adc.w	r3, r2, r2
 80049b4:	930d      	str	r3, [sp, #52]	; 0x34
 80049b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049ba:	4bcf      	ldr	r3, [pc, #828]	; (8004cf8 <pow+0x3c0>)
 80049bc:	2200      	movs	r2, #0
 80049be:	428b      	cmp	r3, r1
 80049c0:	bf08      	it	eq
 80049c2:	4282      	cmpeq	r2, r0
 80049c4:	f080 8265 	bcs.w	8004e92 <pow+0x55a>
 80049c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049cc:	ed9d 6b00 	vldr	d6, [sp]
 80049d0:	ee37 0b06 	vadd.f64	d0, d7, d6
 80049d4:	b01b      	add	sp, #108	; 0x6c
 80049d6:	ecbd 8b0a 	vpop	{d8-d12}
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	49c7      	ldr	r1, [pc, #796]	; (8004cfc <pow+0x3c4>)
 80049e0:	2000      	movs	r0, #0
 80049e2:	428d      	cmp	r5, r1
 80049e4:	bf08      	it	eq
 80049e6:	4284      	cmpeq	r4, r0
 80049e8:	d10b      	bne.n	8004a02 <pow+0xca>
 80049ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80049ee:	19b3      	adds	r3, r6, r6
 80049f0:	930e      	str	r3, [sp, #56]	; 0x38
 80049f2:	eb42 0302 	adc.w	r3, r2, r2
 80049f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80049f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80049fc:	4bbe      	ldr	r3, [pc, #760]	; (8004cf8 <pow+0x3c0>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	e7dd      	b.n	80049be <pow+0x86>
 8004a02:	1921      	adds	r1, r4, r4
 8004a04:	9106      	str	r1, [sp, #24]
 8004a06:	eb45 0105 	adc.w	r1, r5, r5
 8004a0a:	9107      	str	r1, [sp, #28]
 8004a0c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004a10:	49bb      	ldr	r1, [pc, #748]	; (8004d00 <pow+0x3c8>)
 8004a12:	2000      	movs	r0, #0
 8004a14:	42a1      	cmp	r1, r4
 8004a16:	bf08      	it	eq
 8004a18:	4298      	cmpeq	r0, r3
 8004a1a:	d3d5      	bcc.n	80049c8 <pow+0x90>
 8004a1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a20:	428c      	cmp	r4, r1
 8004a22:	bf08      	it	eq
 8004a24:	4283      	cmpeq	r3, r0
 8004a26:	d1cf      	bne.n	80049c8 <pow+0x90>
 8004a28:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004a2c:	49b5      	ldr	r1, [pc, #724]	; (8004d04 <pow+0x3cc>)
 8004a2e:	2000      	movs	r0, #0
 8004a30:	428c      	cmp	r4, r1
 8004a32:	bf08      	it	eq
 8004a34:	4283      	cmpeq	r3, r0
 8004a36:	f000 822c 	beq.w	8004e92 <pow+0x55a>
 8004a3a:	49b3      	ldr	r1, [pc, #716]	; (8004d08 <pow+0x3d0>)
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	42a1      	cmp	r1, r4
 8004a42:	bf08      	it	eq
 8004a44:	4298      	cmpeq	r0, r3
 8004a46:	ea6f 0307 	mvn.w	r3, r7
 8004a4a:	bf34      	ite	cc
 8004a4c:	2201      	movcc	r2, #1
 8004a4e:	2200      	movcs	r2, #0
 8004a50:	0fdb      	lsrs	r3, r3, #31
 8004a52:	429a      	cmp	r2, r3
 8004a54:	f040 821a 	bne.w	8004e8c <pow+0x554>
 8004a58:	ed9d 7b00 	vldr	d7, [sp]
 8004a5c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8004a60:	e7b8      	b.n	80049d4 <pow+0x9c>
 8004a62:	1923      	adds	r3, r4, r4
 8004a64:	9308      	str	r3, [sp, #32]
 8004a66:	eb45 0305 	adc.w	r3, r5, r5
 8004a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6c:	9b08      	ldr	r3, [sp, #32]
 8004a6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004a72:	9310      	str	r3, [sp, #64]	; 0x40
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8004a7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a80:	4299      	cmp	r1, r3
 8004a82:	bf08      	it	eq
 8004a84:	4290      	cmpeq	r0, r2
 8004a86:	d22d      	bcs.n	8004ae4 <pow+0x1ac>
 8004a88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	f175 0300 	sbcs.w	r3, r5, #0
 8004a92:	ee27 0b07 	vmul.f64	d0, d7, d7
 8004a96:	da16      	bge.n	8004ac6 <pow+0x18e>
 8004a98:	4630      	mov	r0, r6
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f7ff ff14 	bl	80048c8 <checkint>
 8004aa0:	2801      	cmp	r0, #1
 8004aa2:	d110      	bne.n	8004ac6 <pow+0x18e>
 8004aa4:	eeb1 0b40 	vneg.f64	d0, d0
 8004aa8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8004aac:	4323      	orrs	r3, r4
 8004aae:	d10c      	bne.n	8004aca <pow+0x192>
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	f177 0300 	sbcs.w	r3, r7, #0
 8004ab6:	da8d      	bge.n	80049d4 <pow+0x9c>
 8004ab8:	b01b      	add	sp, #108	; 0x6c
 8004aba:	ecbd 8b0a 	vpop	{d8-d12}
 8004abe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac2:	f000 ba59 	b.w	8004f78 <__math_divzero>
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	e7ee      	b.n	8004aa8 <pow+0x170>
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	f177 0300 	sbcs.w	r3, r7, #0
 8004ad0:	da80      	bge.n	80049d4 <pow+0x9c>
 8004ad2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004ad6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8004ada:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004ade:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8004ae2:	e777      	b.n	80049d4 <pow+0x9c>
 8004ae4:	2c00      	cmp	r4, #0
 8004ae6:	f175 0300 	sbcs.w	r3, r5, #0
 8004aea:	da35      	bge.n	8004b58 <pow+0x220>
 8004aec:	4630      	mov	r0, r6
 8004aee:	4639      	mov	r1, r7
 8004af0:	f7ff feea 	bl	80048c8 <checkint>
 8004af4:	b940      	cbnz	r0, 8004b08 <pow+0x1d0>
 8004af6:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004afa:	b01b      	add	sp, #108	; 0x6c
 8004afc:	ecbd 8b0a 	vpop	{d8-d12}
 8004b00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	f000 ba50 	b.w	8004fa8 <__math_invalid>
 8004b08:	2801      	cmp	r0, #1
 8004b0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b0e:	bf14      	ite	ne
 8004b10:	2000      	movne	r0, #0
 8004b12:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8004b16:	461d      	mov	r5, r3
 8004b18:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8004b1c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8004b20:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8004b24:	2a7f      	cmp	r2, #127	; 0x7f
 8004b26:	d933      	bls.n	8004b90 <pow+0x258>
 8004b28:	4974      	ldr	r1, [pc, #464]	; (8004cfc <pow+0x3c4>)
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	428d      	cmp	r5, r1
 8004b2e:	bf08      	it	eq
 8004b30:	4284      	cmpeq	r4, r0
 8004b32:	f000 81ae 	beq.w	8004e92 <pow+0x55a>
 8004b36:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d80e      	bhi.n	8004b5c <pow+0x224>
 8004b3e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004b42:	ed9d 7b00 	vldr	d7, [sp]
 8004b46:	42a9      	cmp	r1, r5
 8004b48:	bf08      	it	eq
 8004b4a:	42a0      	cmpeq	r0, r4
 8004b4c:	bf34      	ite	cc
 8004b4e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8004b52:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8004b56:	e73d      	b.n	80049d4 <pow+0x9c>
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e7df      	b.n	8004b1c <pow+0x1e4>
 8004b5c:	42a9      	cmp	r1, r5
 8004b5e:	bf08      	it	eq
 8004b60:	42a0      	cmpeq	r0, r4
 8004b62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b66:	bf2c      	ite	cs
 8004b68:	2301      	movcs	r3, #1
 8004b6a:	2300      	movcc	r3, #0
 8004b6c:	4590      	cmp	r8, r2
 8004b6e:	bf8c      	ite	hi
 8004b70:	f04f 0800 	movhi.w	r8, #0
 8004b74:	f04f 0801 	movls.w	r8, #1
 8004b78:	4543      	cmp	r3, r8
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f000 80af 	beq.w	8004ce0 <pow+0x3a8>
 8004b82:	b01b      	add	sp, #108	; 0x6c
 8004b84:	ecbd 8b0a 	vpop	{d8-d12}
 8004b88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	f000 b9ec 	b.w	8004f68 <__math_oflow>
 8004b90:	f1bc 0f00 	cmp.w	ip, #0
 8004b94:	d10e      	bne.n	8004bb4 <pow+0x27c>
 8004b96:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8004cf0 <pow+0x3b8>
 8004b9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004b9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ba2:	ec57 6b17 	vmov	r6, r7, d7
 8004ba6:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <pow+0x3d4>)
 8004ba8:	2100      	movs	r1, #0
 8004baa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004bae:	1874      	adds	r4, r6, r1
 8004bb0:	eb42 0503 	adc.w	r5, r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	18e3      	adds	r3, r4, r3
 8004bb8:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <pow+0x3d8>)
 8004bba:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8004bbe:	eb45 0303 	adc.w	r3, r5, r3
 8004bc2:	1519      	asrs	r1, r3, #20
 8004bc4:	ee03 1a10 	vmov	s6, r1
 8004bc8:	0d1e      	lsrs	r6, r3, #20
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8004bd0:	0536      	lsls	r6, r6, #20
 8004bd2:	1a63      	subs	r3, r4, r1
 8004bd4:	9312      	str	r3, [sp, #72]	; 0x48
 8004bd6:	eb65 0306 	sbc.w	r3, r5, r6
 8004bda:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bdc:	4b4d      	ldr	r3, [pc, #308]	; (8004d14 <pow+0x3dc>)
 8004bde:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8004be2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004be6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8004bea:	eea5 6b07 	vfma.f64	d6, d5, d7
 8004bee:	ed93 7b00 	vldr	d7, [r3]
 8004bf2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8004bf6:	ed93 4b02 	vldr	d4, [r3, #8]
 8004bfa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8004bfe:	eea3 5b07 	vfma.f64	d5, d3, d7
 8004c02:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8004c06:	ee36 9b05 	vadd.f64	d9, d6, d5
 8004c0a:	ee35 5b49 	vsub.f64	d5, d5, d9
 8004c0e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8004c12:	ed93 4b04 	vldr	d4, [r3, #16]
 8004c16:	ee35 5b06 	vadd.f64	d5, d5, d6
 8004c1a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004c1e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8004c22:	ed93 3b08 	vldr	d3, [r3, #32]
 8004c26:	ee26 0b04 	vmul.f64	d0, d6, d4
 8004c2a:	eeb0 8b40 	vmov.f64	d8, d0
 8004c2e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8004c32:	ed93 4b06 	vldr	d4, [r3, #24]
 8004c36:	ee26 ab00 	vmul.f64	d10, d6, d0
 8004c3a:	ee39 1b00 	vadd.f64	d1, d9, d0
 8004c3e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8004c42:	eea6 4b03 	vfma.f64	d4, d6, d3
 8004c46:	ee39 9b41 	vsub.f64	d9, d9, d1
 8004c4a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8004c4e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8004c52:	ee39 9b00 	vadd.f64	d9, d9, d0
 8004c56:	eea6 3b02 	vfma.f64	d3, d6, d2
 8004c5a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8004c5e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8004c62:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8004c66:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8004c6a:	ed9d 6b00 	vldr	d6, [sp]
 8004c6e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8004c72:	eea0 4b03 	vfma.f64	d4, d0, d3
 8004c76:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8004c7a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8004c7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004c82:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004c86:	eeb0 3b46 	vmov.f64	d3, d6
 8004c8a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8004c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c92:	ee31 9b09 	vadd.f64	d9, d1, d9
 8004c96:	ed9d 6b00 	vldr	d6, [sp]
 8004c9a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8004c9e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8004ca2:	193c      	adds	r4, r7, r4
 8004ca4:	2c3e      	cmp	r4, #62	; 0x3e
 8004ca6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8004caa:	eea6 3b09 	vfma.f64	d3, d6, d9
 8004cae:	d934      	bls.n	8004d1a <pow+0x3e2>
 8004cb0:	428c      	cmp	r4, r1
 8004cb2:	da0d      	bge.n	8004cd0 <pow+0x398>
 8004cb4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cbc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f43f ae87 	beq.w	80049d4 <pow+0x9c>
 8004cc6:	eeb1 0b40 	vneg.f64	d0, d0
 8004cca:	e683      	b.n	80049d4 <pow+0x9c>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e771      	b.n	8004bb4 <pow+0x27c>
 8004cd0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8004cd4:	d920      	bls.n	8004d18 <pow+0x3e0>
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	f173 0300 	sbcs.w	r3, r3, #0
 8004cdc:	f6bf af51 	bge.w	8004b82 <pow+0x24a>
 8004ce0:	b01b      	add	sp, #108	; 0x6c
 8004ce2:	ecbd 8b0a 	vpop	{d8-d12}
 8004ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	f000 b935 	b.w	8004f58 <__math_uflow>
 8004cee:	bf00      	nop
 8004cf0:	00000000 	.word	0x00000000
 8004cf4:	43300000 	.word	0x43300000
 8004cf8:	fff00000 	.word	0xfff00000
 8004cfc:	3ff00000 	.word	0x3ff00000
 8004d00:	ffe00000 	.word	0xffe00000
 8004d04:	7fe00000 	.word	0x7fe00000
 8004d08:	7fdfffff 	.word	0x7fdfffff
 8004d0c:	fcc00000 	.word	0xfcc00000
 8004d10:	c0196aab 	.word	0xc0196aab
 8004d14:	08005038 	.word	0x08005038
 8004d18:	460f      	mov	r7, r1
 8004d1a:	4e65      	ldr	r6, [pc, #404]	; (8004eb0 <pow+0x578>)
 8004d1c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8004d20:	ed96 6b02 	vldr	d6, [r6, #8]
 8004d24:	ed96 7b00 	vldr	d7, [r6]
 8004d28:	eeb0 5b46 	vmov.f64	d5, d6
 8004d2c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8004d30:	ed8d 5b00 	vstr	d5, [sp]
 8004d34:	ee35 6b46 	vsub.f64	d6, d5, d6
 8004d38:	eeb0 5b44 	vmov.f64	d5, d4
 8004d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d40:	ed96 7b04 	vldr	d7, [r6, #16]
 8004d44:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8004d48:	eea6 5b07 	vfma.f64	d5, d6, d7
 8004d4c:	eeb0 7b45 	vmov.f64	d7, d5
 8004d50:	ed96 5b06 	vldr	d5, [r6, #24]
 8004d54:	1849      	adds	r1, r1, r1
 8004d56:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8004d5a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8004d5e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8004d62:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8004d66:	ee33 3b07 	vadd.f64	d3, d3, d7
 8004d6a:	ee23 6b03 	vmul.f64	d6, d3, d3
 8004d6e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8004d72:	ed96 5b08 	vldr	d5, [r6, #32]
 8004d76:	ee33 7b07 	vadd.f64	d7, d3, d7
 8004d7a:	1814      	adds	r4, r2, r0
 8004d7c:	0365      	lsls	r5, r4, #13
 8004d7e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8004d82:	eea3 5b04 	vfma.f64	d5, d3, d4
 8004d86:	eea6 7b05 	vfma.f64	d7, d6, d5
 8004d8a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8004d8e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8004d92:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8004d96:	2000      	movs	r0, #0
 8004d98:	eb10 0a04 	adds.w	sl, r0, r4
 8004d9c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8004da0:	eb45 0b0c 	adc.w	fp, r5, ip
 8004da4:	eea6 7b05 	vfma.f64	d7, d6, d5
 8004da8:	2f00      	cmp	r7, #0
 8004daa:	d16a      	bne.n	8004e82 <pow+0x54a>
 8004dac:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8004db0:	4639      	mov	r1, r7
 8004db2:	ea50 0301 	orrs.w	r3, r0, r1
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	d115      	bne.n	8004de8 <pow+0x4b0>
 8004dbc:	eb1a 0303 	adds.w	r3, sl, r3
 8004dc0:	ee0b 3a10 	vmov	s22, r3
 8004dc4:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <pow+0x57c>)
 8004dc6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8004e98 <pow+0x560>
 8004dca:	eb4b 0303 	adc.w	r3, fp, r3
 8004dce:	ee0b 3a90 	vmov	s23, r3
 8004dd2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8004dd6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8004dda:	b01b      	add	sp, #108	; 0x6c
 8004ddc:	ecbd 8b0a 	vpop	{d8-d12}
 8004de0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	f000 b8f8 	b.w	8004fd8 <__math_check_oflow>
 8004de8:	eb1a 0303 	adds.w	r3, sl, r3
 8004dec:	930a      	str	r3, [sp, #40]	; 0x28
 8004dee:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <pow+0x580>)
 8004df0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8004df4:	eb4b 0303 	adc.w	r3, fp, r3
 8004df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dfa:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004dfe:	ee27 6b05 	vmul.f64	d6, d7, d5
 8004e02:	ee35 7b06 	vadd.f64	d7, d5, d6
 8004e06:	eeb0 3bc7 	vabs.f64	d3, d7
 8004e0a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8004ea0 <pow+0x568>
 8004e16:	d52b      	bpl.n	8004e70 <pow+0x538>
 8004e18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004e1c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e24:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8004e28:	ee35 6b06 	vadd.f64	d6, d5, d6
 8004e2c:	bf48      	it	mi
 8004e2e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8004e32:	ee37 3b04 	vadd.f64	d3, d7, d4
 8004e36:	ee34 5b43 	vsub.f64	d5, d4, d3
 8004e3a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004e3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e42:	ee37 7b03 	vadd.f64	d7, d7, d3
 8004e46:	ee37 7b44 	vsub.f64	d7, d7, d4
 8004e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	d105      	bne.n	8004e60 <pow+0x528>
 8004e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e56:	463a      	mov	r2, r7
 8004e58:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004e5c:	ec43 2b17 	vmov	d7, r2, r3
 8004e60:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8004e64:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8004e68:	ee26 6b00 	vmul.f64	d6, d6, d0
 8004e6c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8004e70:	ee27 0b00 	vmul.f64	d0, d7, d0
 8004e74:	b01b      	add	sp, #108	; 0x6c
 8004e76:	ecbd 8b0a 	vpop	{d8-d12}
 8004e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7e:	f000 b8a2 	b.w	8004fc6 <__math_check_uflow>
 8004e82:	ec4b ab10 	vmov	d0, sl, fp
 8004e86:	eea7 0b00 	vfma.f64	d0, d7, d0
 8004e8a:	e5a3      	b.n	80049d4 <pow+0x9c>
 8004e8c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8004ea8 <pow+0x570>
 8004e90:	e5a0      	b.n	80049d4 <pow+0x9c>
 8004e92:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8004e96:	e59d      	b.n	80049d4 <pow+0x9c>
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	7f000000 	.word	0x7f000000
 8004ea0:	00000000 	.word	0x00000000
 8004ea4:	00100000 	.word	0x00100000
	...
 8004eb0:	08006080 	.word	0x08006080
 8004eb4:	c0f00000 	.word	0xc0f00000
 8004eb8:	3fe00000 	.word	0x3fe00000
 8004ebc:	00000000 	.word	0x00000000

08004ec0 <sqrt>:
 8004ec0:	b508      	push	{r3, lr}
 8004ec2:	ed2d 8b04 	vpush	{d8-d9}
 8004ec6:	eeb0 8b40 	vmov.f64	d8, d0
 8004eca:	f000 f823 	bl	8004f14 <__ieee754_sqrt>
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <sqrt+0x50>)
 8004ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	d011      	beq.n	8004efc <sqrt+0x3c>
 8004ed8:	eeb4 8b48 	vcmp.f64	d8, d8
 8004edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee0:	d60c      	bvs.n	8004efc <sqrt+0x3c>
 8004ee2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8004f08 <sqrt+0x48>
 8004ee6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	d505      	bpl.n	8004efc <sqrt+0x3c>
 8004ef0:	f7ff fcb8 	bl	8004864 <__errno>
 8004ef4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8004ef8:	2321      	movs	r3, #33	; 0x21
 8004efa:	6003      	str	r3, [r0, #0]
 8004efc:	ecbd 8b04 	vpop	{d8-d9}
 8004f00:	bd08      	pop	{r3, pc}
 8004f02:	bf00      	nop
 8004f04:	f3af 8000 	nop.w
	...
 8004f10:	20000070 	.word	0x20000070

08004f14 <__ieee754_sqrt>:
 8004f14:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8004f18:	4770      	bx	lr

08004f1a <with_errno>:
 8004f1a:	b513      	push	{r0, r1, r4, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	ed8d 0b00 	vstr	d0, [sp]
 8004f22:	f7ff fc9f 	bl	8004864 <__errno>
 8004f26:	ed9d 0b00 	vldr	d0, [sp]
 8004f2a:	6004      	str	r4, [r0, #0]
 8004f2c:	b002      	add	sp, #8
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <xflow>:
 8004f30:	b082      	sub	sp, #8
 8004f32:	b158      	cbz	r0, 8004f4c <xflow+0x1c>
 8004f34:	eeb1 7b40 	vneg.f64	d7, d0
 8004f38:	ed8d 7b00 	vstr	d7, [sp]
 8004f3c:	ed9d 7b00 	vldr	d7, [sp]
 8004f40:	2022      	movs	r0, #34	; 0x22
 8004f42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8004f46:	b002      	add	sp, #8
 8004f48:	f7ff bfe7 	b.w	8004f1a <with_errno>
 8004f4c:	eeb0 7b40 	vmov.f64	d7, d0
 8004f50:	e7f2      	b.n	8004f38 <xflow+0x8>
 8004f52:	0000      	movs	r0, r0
 8004f54:	0000      	movs	r0, r0
	...

08004f58 <__math_uflow>:
 8004f58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004f60 <__math_uflow+0x8>
 8004f5c:	f7ff bfe8 	b.w	8004f30 <xflow>
 8004f60:	00000000 	.word	0x00000000
 8004f64:	10000000 	.word	0x10000000

08004f68 <__math_oflow>:
 8004f68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004f70 <__math_oflow+0x8>
 8004f6c:	f7ff bfe0 	b.w	8004f30 <xflow>
 8004f70:	00000000 	.word	0x00000000
 8004f74:	70000000 	.word	0x70000000

08004f78 <__math_divzero>:
 8004f78:	b082      	sub	sp, #8
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004f80:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8004f84:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8004f88:	ed8d 7b00 	vstr	d7, [sp]
 8004f8c:	ed9d 0b00 	vldr	d0, [sp]
 8004f90:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8004fa0 <__math_divzero+0x28>
 8004f94:	2022      	movs	r0, #34	; 0x22
 8004f96:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	f7ff bfbd 	b.w	8004f1a <with_errno>
	...

08004fa8 <__math_invalid>:
 8004fa8:	eeb0 7b40 	vmov.f64	d7, d0
 8004fac:	eeb4 7b47 	vcmp.f64	d7, d7
 8004fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8004fb8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8004fbc:	d602      	bvs.n	8004fc4 <__math_invalid+0x1c>
 8004fbe:	2021      	movs	r0, #33	; 0x21
 8004fc0:	f7ff bfab 	b.w	8004f1a <with_errno>
 8004fc4:	4770      	bx	lr

08004fc6 <__math_check_uflow>:
 8004fc6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	d102      	bne.n	8004fd6 <__math_check_uflow+0x10>
 8004fd0:	2022      	movs	r0, #34	; 0x22
 8004fd2:	f7ff bfa2 	b.w	8004f1a <with_errno>
 8004fd6:	4770      	bx	lr

08004fd8 <__math_check_oflow>:
 8004fd8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8004ff8 <__math_check_oflow+0x20>
 8004fdc:	eeb0 7bc0 	vabs.f64	d7, d0
 8004fe0:	eeb4 7b46 	vcmp.f64	d7, d6
 8004fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe8:	dd02      	ble.n	8004ff0 <__math_check_oflow+0x18>
 8004fea:	2022      	movs	r0, #34	; 0x22
 8004fec:	f7ff bf95 	b.w	8004f1a <with_errno>
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	ffffffff 	.word	0xffffffff
 8004ffc:	7fefffff 	.word	0x7fefffff

08005000 <_init>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

0800500c <_fini>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr
